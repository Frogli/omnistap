;  Calling $mock() resets the chain
Calculate ibExpectedSpecificCall as kFalse
Calculate iiParameter as 0

;  If we're already mocking this method, move on
If ilMockMethods.MethodName=pcMethodName
	Quit method $cinst.$objref
End If

;  Ensure this method exists
If $cinst.$getMockInstance().[pcMethodName].$cando()=kFalse
	Do ioTAP.$fail(con("Failed to mock ",pcMethodName," on ",$cinst.$getMockInstance().$class().$superclass,". Method does not exist."))
	Quit method
End If

;  If we've previously mocked this method and need to modify it, find it and move on
Do ilMockMethods.$search(ilMockMethods.MethodName=pcMethodName,1,0,0,0) Returns ilMockMethods.$line
If ilMockMethods.$line>0
	Do $cinst.$_prepareExpect()
	Quit method $cinst.$objref
End If

;  Mock the method
Do ilMockMethods.$add()
Calculate ilMockMethods.$line as ilMockMethods.$linecount
Calculate ilMockMethods.MethodName as pcMethodName
Calculate ilMockMethods.Expected as kFalse
Calculate ilMockMethods.CallcountHave as 0
Calculate ilMockMethods.CallcountWant as 0
Do $cinst.$_getRealMethodParameters() Returns ilMockMethods.Parameters

Do llCalls.$cols.$add("Parameters",kList)
Do llCalls.$cols.$add("ParameterSignature",kCharacter,kSimplechar,100000000)
Calculate ilMockMethods.Calls as llCalls

Do llExtraCalls.$cols.$add("Stack",kList)
Calculate ilMockMethods.ExtraCalls as llExtraCalls

;  Setup expected parameters
Do $cinst.$_prepareExpect()

;  Setup mock method
Do $cinst.$_addMockMethod()

Quit method $cinst.$objref