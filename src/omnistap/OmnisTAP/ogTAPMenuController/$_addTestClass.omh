Set reference lirProductionLibrary to pirProductionClass.$lib
Set reference lirProductionClassFolder to lirProductionLibrary.$classes.$findident(pirProductionClass.$parentfolder)

If isclear(lirProductionClassFolder)
	Calculate lcTestFolderName as "Testing"
Else
	Calculate lcTestFolderName as con(lirProductionClassFolder.$name," Testing")
End If

Do $cinst.$_getTestLibraryForProductionLibrary(lirProductionLibrary) Returns lirTestLibrary
Do $cinst.$_getFolderInLibrary(lirTestLibrary,lcTestFolderName) Returns lirTestFolder

Do lirTestLibrary.$objects.$add(pcTestClassName) Returns lirTestClass
Calculate lirTestClass.$superclass as $cinst.$_getSuperclassForTestClass(lirTestLibrary)
Calculate lirTestClass.$parentfolder as lirTestFolder.$ident
Calculate lirTestClass.$showascheckedout as kTrue
Calculate lirTestClass.$designtaskname as "Startup_Task"
Calculate lirTestClass.$external as kTrue

If $cinst.$_doesLibraryUseSeparateTestLibrary(lirTestLibrary)
	Calculate lcProductionClassPath as con(lirProductionLibrary().$name,".",pirProductionClass().$name)
	Calculate lcFullProductionClassPath as con("$libs.",lirProductionLibrary().$name,".",pirProductionClass.$group().$name,".",pirProductionClass.$name)
Else
	Calculate lcProductionClassPath as pirProductionClass().$name
	Calculate lcFullProductionClassPath as con(pirProductionClass.$group().$name,".",pirProductionClass.$name)
End If

Switch pirProductionClass.$classtype
	Case kTable
		Do lirTestClass.$ivardefs.$add("irMock",kRow,lcProductionClassPath) Returns lirMockVariable
	Case kObjectclass
		Do lirTestClass.$ivardefs.$add("iorMock",kObjectref,lcProductionClassPath) Returns lirMockVariable
	Default
		Do lirTestClass.$ivardefs.$add("iirMock",kItemref) Returns lirMockVariable
End Switch

If pirProductionClass.$classtype=kTable
	Calculate lcMockSetupMethodLine as con("Do $cinst.$mock(",lcFullProductionClassPath,",",lirMockVariable().$name,")")
Else
	Calculate lcMockSetupMethodLine as con("Do $cinst.$mock(",lcFullProductionClassPath,") Returns ",lirMockVariable().$name)
End If

Do lirTestClass.$methods.$add("$setup") Returns lirSetupMethod

Do lirSetupMethod.$methodlines.$add("Do inherited")
Do lirSetupMethod.$methodlines.$add()

Do lirSetupMethod.$methodlines.$add(lcMockSetupMethodLine)

Quit method lirTestClass